rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isInvolved(chatData) {
      return request.auth.uid == chatData.senderId ||
      			 request.auth.uid == chatData.receiverId;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isUserInChat(chatData) {
      return isAuthenticated() && 
        (request.auth.uid == chatData.senderId || 
         request.auth.uid == chatData.receiverId);
    }

    // Helper functions to check if the update is a valid transaction
    function isValidTransactionUpdate(sareeData) {
      let diff = request.resource.data.diff(resource.data);
      // Added swapStatus to allowed update fields
      return diff.affectedKeys().hasOnly(['isAvailable', 'lastTransactionId', 'rentalStatus', 'swapStatus']) &&
             request.auth != null;
    }
    
    // Check if this is a valid swap update
    function isSwapParticipant(sareeData) {
      return request.auth != null && (
        // Original owner updating status
        isOwner(sareeData.userId) || 
        // Requester updating own saree for swap
        (sareeData.swapStatus == 'pending' && 
         'lastTransactionId' in request.resource.data)
      );
    }

    // Users collection rules
    match /users/{userId} {
      // Allow users to read and write only their own documents
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Saree collection rules
    match /sarees/{sareeId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Updated rule to allow swap operations
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isValidTransactionUpdate(resource.data) ||
        isSwapParticipant(resource.data)
      );
      allow delete: if isOwner(resource.data.userId);
    }

    // Transaction collection rules
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.buyerId || 
        request.auth.uid == resource.data.sellerId
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.buyerId || 
        request.auth.uid == resource.data.sellerId
      );
    }
    // Chat collection rules
    match /chats/{chatId} {
      allow create: if isAuthenticated() &&
        request.resource.data.senderId == request.auth.uid;
      
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
         
      allow update: if isAuthenticated() && 
        isUserInChat(resource.data);
        
      allow delete: if false;  // Prevent message deletion
    }
    
    match /reviews/{reviewId} {
      allow read;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
  }
}
